name: 'Deploy to Kubernetes'
description: 'Deploy application to Kubernetes using Kustomize'

inputs:
  environment:
    description: 'Deployment environment (dev/prod)'
    required: true
  kubeconfig:
    description: 'Base64 encoded kubeconfig content'
    required: true
  image-tag:
    description: 'Docker image tag to deploy'
    required: true
  kustomize-path:
    description: 'Path to kustomization directory'
    required: false
    default: 'deploy/overlays'
  deployment-name:
    description: 'Name of the deployment to restart'
    required: false
    default: 'nginx-deployment'
  namespace:
    description: 'Kubernetes namespace'
    required: false
    default: 'default'

runs:
  using: 'composite'
  steps:
    - name: Apply base Kustomization (without image updates)
      shell: bash
      run: |
        kubectl apply -k ${{ inputs.kustomize-path }}/${{ inputs.environment }}

    - name: Update image tag in deployment
      shell: bash
      run: |
        if [ -n "${{ inputs.image-tag }}" ] && [ "${{ inputs.image-tag }}" != "latest" ]; then
          echo "Updating deployment image to: ghcr.io/nh-homelab/reverse-proxy:${{ inputs.image-tag }}"
          
          kubectl patch deployment ${{ inputs.deployment-name }} \
            -n ${{ inputs.namespace }} \
            -p '{"spec":{"template":{"spec":{"containers":[{"name":"nginx","image":"ghcr.io/nh-homelab/reverse-proxy:${{ inputs.image-tag }}"}]}}}}' \
            --dry-run=client -o yaml | kubectl apply -f -
        else
          echo "Skipping image update: tag is empty or 'latest'"
        fi

    - name: Rollout restart
      shell: bash
      run: |
        kubectl rollout restart deployment/${{ inputs.deployment-name }} -n ${{ inputs.namespace }}

    - name: Wait for deployment rollout
      shell: bash
      run: |
        kubectl rollout status deployment/${{ inputs.deployment-name }} -n ${{ inputs.namespace }} --timeout=300s

    - name: Verify deployment and image
      shell: bash
      run: |
        # Expected image
        EXPECTED_IMAGE="ghcr.io/nh-homelab/reverse-proxy:${{ inputs.image-tag }}"
        
        # Verify deployment spec has correct image
        DEPLOYMENT_IMAGE=$(kubectl get deployment/${{ inputs.deployment-name }} -n ${{ inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}')
        echo "Deployment image: $DEPLOYMENT_IMAGE"
        
        # Verify running pods have correct image
        echo "Pod images:"
        kubectl get pods -l app=nginx -n ${{ inputs.namespace }} -o jsonpath='{.items[*].spec.containers[0].image}' | tr ' ' '\n' | sort -u
        
        # Check if deployment image matches expected
        if [ "$DEPLOYMENT_IMAGE" != "$EXPECTED_IMAGE" ]; then
          echo "ERROR: Deployment image mismatch!"
          echo "Expected: $EXPECTED_IMAGE"
          echo "Actual: $DEPLOYMENT_IMAGE"
          exit 1
        fi
        
        # Show pod and service status
        echo "Pod status:"
        kubectl get pods -l app=nginx -n ${{ inputs.namespace }}
        
        echo "Service status:"
        kubectl get service -l app=nginx -n ${{ inputs.namespace }}
        
        echo "âœ… Verification successful: Correct image $EXPECTED_IMAGE is deployed"
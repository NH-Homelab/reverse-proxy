name: Deploy Reverse Proxy

on:
  push:
    branches:
      - '**'  # Trigger on push to any branch
  workflow_dispatch:
    inputs:
      deploy_to_prod:
        description: 'Deploy to production'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: self-hosted
    outputs:
      image-digest: ${{ steps.build.outputs.image-digest }}
      image-tags: ${{ steps.build.outputs.image-tags }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push Docker image
        id: build
        uses: ./.github/actions/build-image
        with:
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev:
    runs-on: dev
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Kubernetes Secret for Dev
        uses: ./.github/actions/create-k8s-secret
        with:
          secret-name: proxy-config-secret
          namespace: default
          kubeconfig: ${{ secrets.DEV_KUBECONFIG }}
          secret-vars: |
            {
              "MINIO_HOST": "${{ secrets.MINIO_HOST }}",
              "MINIO_PORT": "${{ secrets.MINIO_PORT }}",
              "MINIO_S3_PORT": "${{ secrets.MINIO_S3_PORT }}",
              "PGADMIN_HOST": "${{ secrets.PGADMIN_HOST }}",
              "PGADMIN_PORT": "${{ secrets.PGADMIN_PORT }}",
              "PLEX_HOST": "${{ secrets.PLEX_HOST }}",
              "PLEX_PORT": "${{ secrets.PLEX_PORT }}",
              "PIHOLE_HOST": "${{ secrets.PIHOLE_HOST }}",
              "PIHOLE_PORT": "${{ secrets.PIHOLE_PORT }}",
              "PROXMOX_HOST": "${{ secrets.PROXMOX_HOST }}",
              "PROXMOX_PORT": "${{ secrets.PROXMOX_PORT }}",
              "AUTH_SERVICE_HOST": "${{ secrets.AUTH_SERVICE_HOST }}",
              "AUTH_SERVICE_PORT": "${{ secrets.AUTH_SERVICE_PORT }}"
            }

      - name: Deploy to Dev
        uses: ./.github/actions/deploy
        with:
          environment: prod  # Use prod overlay for dev deployment
          kubeconfig: ${{ secrets.DEV_KUBECONFIG }}
          image-tag: ${{ github.sha }}

  deploy-prod:
    runs-on: k8s-runner
    needs: [build, deploy-dev]
    # Deploy to prod if:
    # 1. Push/merge to main branch, OR
    # 2. Manual workflow dispatch with deploy_to_prod = true
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_to_prod == true)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Kubernetes Secret for Prod
        uses: ./.github/actions/create-k8s-secret
        with:
          secret-name: proxy-config-secret
          namespace: default
          kubeconfig: ${{ secrets.PROD_KUBECONFIG }}
          secret-vars: |
            {
              "MINIO_HOST": "${{ secrets.MINIO_HOST }}",
              "MINIO_PORT": "${{ secrets.MINIO_PORT }}",
              "MINIO_S3_PORT": "${{ secrets.MINIO_S3_PORT }}",
              "PGADMIN_HOST": "${{ secrets.PGADMIN_HOST }}",
              "PGADMIN_PORT": "${{ secrets.PGADMIN_PORT }}",
              "PLEX_HOST": "${{ secrets.PLEX_HOST }}",
              "PLEX_PORT": "${{ secrets.PLEX_PORT }}",
              "PIHOLE_HOST": "${{ secrets.PIHOLE_HOST }}",
              "PIHOLE_PORT": "${{ secrets.PIHOLE_PORT }}",
              "PROXMOX_HOST": "${{ secrets.PROXMOX_HOST }}",
              "PROXMOX_PORT": "${{ secrets.PROXMOX_PORT }}",
              "AUTH_SERVICE_HOST": "${{ secrets.AUTH_SERVICE_HOST }}",
              "AUTH_SERVICE_PORT": "${{ secrets.AUTH_SERVICE_PORT }}"
            }

      - name: Deploy to Prod
        uses: ./.github/actions/deploy
        with:
          environment: prod
          kubeconfig: ${{ secrets.PROD_KUBECONFIG }}
          image-tag: ${{ github.sha }}